name: SizeTest_matrix

on:
  workflow_dispatch:
    inputs:
      CONFIG_BASE_VERSION:
        description: '基准配置版本(clean|basic|func|test)'
        required: false
        default: 'clean'
      Test_per_Job_Limit:
        description: '单作业测试数限制'
        required: false
        default: '10'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai
  CONFIG_BASE_VERSION: ${{ github.event.inputs.CONFIG_BASE_VERSION }}
  SEQ_FILENAME: TestSequence.txt

jobs:
  SEQ_Factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.json_content }}
      TimeStamp: ${{ steps.info.outputs.TimeStamp }}
    steps:
      - uses: actions/checkout@main

      - name: List Sequence Information
        id: info
        run: |
          # 时间戳，组成Artifact的文件名
          date +"%Y%m%d%H%M"
          echo "::set-output name=TimeStamp::$(date +"%Y%m%d%H%M")"
          # 打印序列信息和目录
          echo '====================序列内容===================='
          cat ${{ env.SEQ_FILENAME }} -An
          echo '====================测试目录===================='
          grep '@' ${{ env.SEQ_FILENAME }} -n | cat -n

      # assign jobs
      - name: Divide Work of Tests
        id: set-matrix
        run: |
          lines_cnt=$(wc -l ${{ env.SEQ_FILENAME }} | cut -f1 -d' ')
          number_of_tests=$(grep '@' ${{ env.SEQ_FILENAME }} -c)
          title_line_list=($(grep '@' ${{ env.SEQ_FILENAME }} -n | cut -d: -f1))
          echo "序列文件共${lines_cnt}行，包含${number_of_tests}条测试任务，\"[任务序号]标题行行号\"序列如下："
          for i in $(seq ${number_of_tests}); do
            echo -n "[$i]${title_line_list[i-1]} "
          done
          echo

          # 计算作业数及每个作业分配的测试数
          Test_per_Job_Limit=${{ github.event.inputs.Test_per_Job_Limit }}
          if [ $(( number_of_tests % Test_per_Job_Limit )) -eq 0 ]; then
            worker_num=$((number_of_tests/Test_per_Job_Limit))
            works_a_worker=${Test_per_Job_Limit}
          else
            worker_num=$((number_of_tests/Test_per_Job_Limit+1))
            if [ $(( number_of_tests % worker_num )) -eq 0 ]; then
              works_a_worker=$((number_of_tests/worker_num))
            else
              works_a_worker=$((number_of_tests/worker_num+1))
            fi
          fi
          # 分工点序列，前闭后开
          spliter_seq=($(seq 1 ${works_a_worker} ${number_of_tests}))
          spliter_seq[worker_num]=$((number_of_tests+1)) # 补充最后一个开点

          # 生成job matrix，格式为json；同时打印日志
          # {
          #     "include":[
          #         {
          #             "SEQ_ID":"1",
          #             "context_field":"1,11p",
          #             "test_cnt_init":"1"
          #         },...
          #     ]
          # }
          json_content='{"include":['
          echo "${number_of_tests}条测试任务分${worker_num}个序列执行，分工依次为："
          for i in $(seq ${worker_num}); do
            from_job_no=${spliter_seq[i-1]}
            to_job_no=$((spliter_seq[i]-1))
            from_seq_line=${title_line_list[from_job_no-1]}
            to_seq_line=$((title_line_list[to_job_no]-1))
            [[ $to_seq_line -eq -1 ]] && to_seq_line=${lines_cnt}
            context_field="${from_seq_line},${to_seq_line}p"
            echo "No.${from_job_no}-${to_job_no}" "|" "行号：${context_field}"
            json_content=${json_content}"{\"SEQ_ID\":\"${i}\",\"context_field\":\"${context_field}\",\"test_cnt_init\":\"${from_job_no}\"},"
          done
          # 去掉最后一个逗号，封底
          json_content=${json_content%?}']}'
          echo "[json_content] ${json_content}"
          # 输出到output交给SEQs-strategy-matrix
          echo "::set-output name=json_content::${json_content}"

  SEQs:
    runs-on: ubuntu-20.04
    needs: SEQ_Factory
    strategy:
      matrix: ${{fromJSON(needs.SEQ_Factory.outputs.matrix)}}
    env:
      SEQ_ID: ${{ matrix.SEQ_ID }}
      context_field: ${{ matrix.context_field }}
      test_cnt_init: ${{ matrix.test_cnt_init }}

    steps:
      - uses: actions/checkout@main

      - name: Read Job Sequence
        run: |
          # 依据作业分配到的行号，截取对应序列输出到文件
          sed -n ${context_field} ${SEQ_FILENAME} > JOB_TESTs_SEQ
          # 打印序列信息和目录
          echo "====================作业${SEQ_ID}测试序列(${context_field})===================="
          cat JOB_TESTs_SEQ -An
          echo "====================测试目录(计数器初始值为${test_cnt_init})===================="
          grep '@' JOB_TESTs_SEQ -n | cat -n

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          docker image prune -a -f
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          echo "[Check disk usage]"
          df -hT .
          echo "[Check space usage] $PWD"
          du -h --max-depth=2

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update & Install feeds
        working-directory: /workdir/openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "[Check disk usage]"
          df -hT .
          echo "[Check space usage] $PWD"
          du -h --max-depth=1

      - name: Download All package
        id: download
        run: |
          [ -e files ] && mv files openwrt/files
          # [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH

          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH $CONFIG_BASE_VERSION             # 配置基准，.config baseline
          cp .config clean.config                                       # 保留副本，每次编译都以此为起点
          sed '/@/d' $GITHUB_WORKSPACE/JOB_TESTs_SEQ >> .config         # 去掉注释/不勾选的行，使测试包内容也添加至下载中
          make defconfig

          # 下载包，如若出错生成警告
          make download -j8 | tee make_download.log
          grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Try 1]" {}
          # 二次尝试
          grep 'ERROR:' -q make_download.log && make download -j1 V=s | tee make_download.log
          grep 'ERROR:' make_download.log | xargs -i echo "::warning:: [Download Try 2]" {}
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

          echo "[Check disk usage]"
          df -hT .
          echo "[Check space usage] $PWD"
          du -h --max-depth=1

      - name: Compile & Log filesize
        id: compile
        run: |
          cd openwrt
          # 从.config中截取型号信息
          # grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          # [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV

          # 测试序列预处理
          JOB_TESTs_SEQ="${GITHUB_WORKSPACE}/JOB_TESTs_SEQ"
          sed -i 's/\r//' ${JOB_TESTs_SEQ}                   # 去除win下的CR(\r)，否则上传artifacts时会出错
          # 分割测试序列，组合成一系列配置文件
          (mkdir config_seq; cd config_seq; csplit ${JOB_TESTs_SEQ} /@/ {*} -sz)

          # 创建产物目录
          ARTIFACTS_DIR=$(mkdir ARTIFACTS_DIR; cd ARTIFACTS_DIR; pwd)
          echo "[ARTIFACTS_DIR]${ARTIFACTS_DIR}"
          echo "::set-output name=ARTIFACTS_DIR::${ARTIFACTS_DIR}"

          # 后台记录CPU占用
          uptime_log () { while :; do uptime >> $ARTIFACTS_DIR/uptime_log_${SEQ_ID}.txt; sleep 30; done }
          uptime_log &

          cnt=$((test_cnt_init-1))                           # 轮次计数器初始化，因为一开始就++所以先-1
          for file in config_seq/xx*
          do
            title=$(head $file -n1)
            echo "[Test $((++cnt))] $title" $(date +"%Y-%m-%d %H:%M")

            cp -f clean.config .config    # 用基准.config重置，起点
            echo "[Test $cnt] Append lines to .config"
            sed '/@/d' $file | tee -a .config         # 去掉注释行，增写配置
            echo "[Test $cnt] End of writing .config"

            # 测试名：[测试序号][标题]，例：1@Clean
            TEST_NAME="${cnt}${title}"
            # 测试日志文件
            TEST_LOG_FILE="$ARTIFACTS_DIR/${TEST_NAME}.log"
            cp $file "$TEST_LOG_FILE"
            echo "[TEST_LOG_FILE] ${TEST_LOG_FILE}"
            # 测试结果存放目录
            TEST_RESULT_DIR="$ARTIFACTS_DIR/${TEST_NAME}"
            mkdir "${TEST_RESULT_DIR}"
            echo "[TEST_RESULT_DIR] ${TEST_RESULT_DIR}"

            # 生成完整.config
            make defconfig
            # 编译
            echo "[Test ${cnt}] Try $(($(nproc)+1)) thread compile..."
            make -j $(($(nproc)+1)) || make -j1 || make -j1 V=s
            echo "[Test ${cnt}] Compile finished..."

            echo "[Test ${cnt}] Logging filesize..."
            # 通过bytes换算，获得Mb数（精度-两位小数），记录到文件
            du -ab --max-depth=1 ./bin/targets/*/* | awk '{printf "%8.2fM",$1/2^20; $1=""; print}' | tee -a ${TEST_LOG_FILE}
            echo "[Test ${cnt}] --END OF TEST--"
            # 保留有用文件
            mv ./bin/targets/*/*/*.buildinfo ./bin/targets/*/*/*.manifest "${TEST_RESULT_DIR}/"

            echo "[Test ${cnt}] Clean for the next round..."
            # 删除无用文件
            # rm ./bin/targets/*/*/*.bin ./bin/targets/*/*/sha256sums
            find ./bin/targets/*/* -maxdepth 1 -type f -exec rm -v {} \;
            echo "[Test $cnt] --Finished--" $(date +"%Y-%m-%d %H:%M")
          done

          # 保留所有的ipk
          mv ./bin ${ARTIFACTS_DIR}/

          echo "[Check disk usage]"
          df -hT .
          echo "[Check space usage] $PWD"
          du -h --max-depth=1
          echo "------------------------!!End of the Test!!------------------------"

      - name: Upload Artifact Directory
        uses: actions/upload-artifact@main
        # if: steps.compile.conclusion == 'success'
        with:
          name: SizeTest_${{ needs.SEQ_Factory.outputs.TimeStamp }}
          path: ${{ steps.compile.outputs.ARTIFACTS_DIR }}

      - name: SSH Debug
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}

  delete-workflow-run:
    runs-on: ubuntu-latest
    needs: SEQs
    if: ${{ always() }}
    steps:
      - uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3
